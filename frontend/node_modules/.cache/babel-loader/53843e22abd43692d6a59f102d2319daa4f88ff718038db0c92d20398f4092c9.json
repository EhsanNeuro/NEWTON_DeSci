{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  hasLocalMatch: null,\n  matchLocalPattern: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  hasLocalMatch: function () {\n    return hasLocalMatch;\n  },\n  matchLocalPattern: function () {\n    return matchLocalPattern;\n  }\n});\nconst _picomatch = require(\"next/dist/compiled/picomatch\");\nfunction matchLocalPattern(pattern, url) {\n  if (pattern.search !== undefined) {\n    if (pattern.search !== url.search) {\n      return false;\n    }\n  }\n  var _pattern_pathname;\n  if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : '**', {\n    dot: true\n  }).test(url.pathname)) {\n    return false;\n  }\n  return true;\n}\nfunction hasLocalMatch(localPatterns, urlPathAndQuery) {\n  if (!localPatterns) {\n    // if the user didn't define \"localPatterns\", we allow all local images\n    return true;\n  }\n  const url = new URL(urlPathAndQuery, 'http://n');\n  return localPatterns.some(p => matchLocalPattern(p, url));\n}","map":{"version":3,"names":["hasLocalMatch","matchLocalPattern","pattern","url","search","undefined","_pattern_pathname","_picomatch","makeRe","pathname","dot","test","localPatterns","urlPathAndQuery","URL","some","p"],"sources":["C:\\Users\\Ehsan\\node_modules\\next\\src\\shared\\lib\\match-local-pattern.ts"],"sourcesContent":["import type { LocalPattern } from './image-config'\nimport { makeRe } from 'next/dist/compiled/picomatch'\n\n// Modifying this function should also modify writeImagesManifest()\nexport function matchLocalPattern(pattern: LocalPattern, url: URL): boolean {\n  if (pattern.search !== undefined) {\n    if (pattern.search !== url.search) {\n      return false\n    }\n  }\n\n  if (!makeRe(pattern.pathname ?? '**', { dot: true }).test(url.pathname)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hasLocalMatch(\n  localPatterns: LocalPattern[] | undefined,\n  urlPathAndQuery: string\n): boolean {\n  if (!localPatterns) {\n    // if the user didn't define \"localPatterns\", we allow all local images\n    return true\n  }\n  const url = new URL(urlPathAndQuery, 'http://n')\n  return localPatterns.some((p) => matchLocalPattern(p, url))\n}\n"],"mappings":";;;;;;;;;;;;;;;;EAkBgBA,aAAa,WAAAA,CAAA;WAAbA,aAAA;;EAdAC,iBAAiB,WAAAA,CAAA;WAAjBA,iBAAA;;;2BAHO;AAGhB,SAASA,kBAAkBC,OAAqB,EAAEC,GAAQ;EAC/D,IAAID,OAAA,CAAQE,MAAM,KAAKC,SAAA,EAAW;IAChC,IAAIH,OAAA,CAAQE,MAAM,KAAKD,GAAA,CAAIC,MAAM,EAAE;MACjC,OAAO;IACT;EACF;MAEYE,iBAAA;EAAZ,IAAI,CAAC,IAAAC,UAAA,CAAAC,MAAM,EAAC,CAAAF,iBAAA,GAAAJ,OAAA,CAAQO,QAAQ,YAAhBH,iBAAA,GAAoB,MAAM;IAAEI,GAAA,EAAK;EAAK,GAAGC,IAAI,CAACR,GAAA,CAAIM,QAAQ,GAAG;IACvE,OAAO;EACT;EAEA,OAAO;AACT;AAEO,SAAST,cACdY,aAAyC,EACzCC,eAAuB;EAEvB,IAAI,CAACD,aAAA,EAAe;IAClB;IACA,OAAO;EACT;EACA,MAAMT,GAAA,GAAM,IAAIW,GAAA,CAAID,eAAA,EAAiB;EACrC,OAAOD,aAAA,CAAcG,IAAI,CAAEC,CAAA,IAAMf,iBAAA,CAAkBe,CAAA,EAAGb,GAAA;AACxD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}