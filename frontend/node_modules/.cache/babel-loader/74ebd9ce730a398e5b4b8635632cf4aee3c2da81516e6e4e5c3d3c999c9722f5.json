{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"getImgProps\", {\n  enumerable: true,\n  get: function () {\n    return getImgProps;\n  }\n});\nconst _warnonce = require(\"./utils/warn-once\");\nconst _imageblursvg = require(\"./image-blur-svg\");\nconst _imageconfig = require(\"./image-config\");\nconst VALID_LOADING_VALUES = ['lazy', 'eager', undefined];\nfunction isStaticRequire(src) {\n  return src.default !== undefined;\n}\nfunction isStaticImageData(src) {\n  return src.src !== undefined;\n}\nfunction isStaticImport(src) {\n  return !!src && typeof src === 'object' && (isStaticRequire(src) || isStaticImageData(src));\n}\nconst allImgs = new Map();\nlet perfObserver;\nfunction getInt(x) {\n  if (typeof x === 'undefined') {\n    return x;\n  }\n  if (typeof x === 'number') {\n    return Number.isFinite(x) ? x : NaN;\n  }\n  if (typeof x === 'string' && /^[0-9]+$/.test(x)) {\n    return parseInt(x, 10);\n  }\n  return NaN;\n}\nfunction getWidths(param, width, sizes) {\n  let {\n    deviceSizes,\n    allSizes\n  } = param;\n  if (sizes) {\n    // Find all the \"vw\" percent sizes used in the sizes prop\n    const viewportWidthRe = /(^|\\s)(1?\\d?\\d)vw/g;\n    const percentSizes = [];\n    for (let match; match = viewportWidthRe.exec(sizes); match) {\n      percentSizes.push(parseInt(match[2]));\n    }\n    if (percentSizes.length) {\n      const smallestRatio = Math.min(...percentSizes) * 0.01;\n      return {\n        widths: allSizes.filter(s => s >= deviceSizes[0] * smallestRatio),\n        kind: 'w'\n      };\n    }\n    return {\n      widths: allSizes,\n      kind: 'w'\n    };\n  }\n  if (typeof width !== 'number') {\n    return {\n      widths: deviceSizes,\n      kind: 'w'\n    };\n  }\n  const widths = [...new Set(\n  // > This means that most OLED screens that say they are 3x resolution,\n  // > are actually 3x in the green color, but only 1.5x in the red and\n  // > blue colors. Showing a 3x resolution image in the app vs a 2x\n  // > resolution image will be visually the same, though the 3x image\n  // > takes significantly more data. Even true 3x resolution screens are\n  // > wasteful as the human eye cannot see that level of detail without\n  // > something like a magnifying glass.\n  // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\n  [width, width * 2 /*, width * 3*/].map(w => allSizes.find(p => p >= w) || allSizes[allSizes.length - 1]))];\n  return {\n    widths,\n    kind: 'x'\n  };\n}\nfunction generateImgAttrs(param) {\n  let {\n    config,\n    src,\n    unoptimized,\n    width,\n    quality,\n    sizes,\n    loader\n  } = param;\n  if (unoptimized) {\n    return {\n      src,\n      srcSet: undefined,\n      sizes: undefined\n    };\n  }\n  const {\n    widths,\n    kind\n  } = getWidths(config, width, sizes);\n  const last = widths.length - 1;\n  return {\n    sizes: !sizes && kind === 'w' ? '100vw' : sizes,\n    srcSet: widths.map((w, i) => loader({\n      config,\n      src,\n      quality,\n      width: w\n    }) + \" \" + (kind === 'w' ? w : i + 1) + kind).join(', '),\n    // It's intended to keep `src` the last attribute because React updates\n    // attributes in order. If we keep `src` the first one, Safari will\n    // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n    // updated by React. That causes multiple unnecessary requests if `srcSet`\n    // and `sizes` are defined.\n    // This bug cannot be reproduced in Chrome or Firefox.\n    src: loader({\n      config,\n      src,\n      quality,\n      width: widths[last]\n    })\n  };\n}\nfunction getImgProps(param, _state) {\n  let {\n    src,\n    sizes,\n    unoptimized = false,\n    priority = false,\n    loading,\n    className,\n    quality,\n    width,\n    height,\n    fill = false,\n    style,\n    overrideSrc,\n    onLoad,\n    onLoadingComplete,\n    placeholder = 'empty',\n    blurDataURL,\n    fetchPriority,\n    decoding = 'async',\n    layout,\n    objectFit,\n    objectPosition,\n    lazyBoundary,\n    lazyRoot,\n    ...rest\n  } = param;\n  const {\n    imgConf,\n    showAltText,\n    blurComplete,\n    defaultLoader\n  } = _state;\n  let config;\n  let c = imgConf || _imageconfig.imageConfigDefault;\n  if ('allSizes' in c) {\n    config = c;\n  } else {\n    const allSizes = [...c.deviceSizes, ...c.imageSizes].sort((a, b) => a - b);\n    const deviceSizes = c.deviceSizes.sort((a, b) => a - b);\n    config = {\n      ...c,\n      allSizes,\n      deviceSizes\n    };\n  }\n  if (typeof defaultLoader === 'undefined') {\n    throw new Error('images.loaderFile detected but the file is missing default export.\\nRead more: https://nextjs.org/docs/messages/invalid-images-config');\n  }\n  let loader = rest.loader || defaultLoader;\n  // Remove property so it's not spread on <img> element\n  delete rest.loader;\n  delete rest.srcSet;\n  // This special value indicates that the user\n  // didn't define a \"loader\" prop or \"loader\" config.\n  const isDefaultLoader = '__next_img_default' in loader;\n  if (isDefaultLoader) {\n    if (config.loader === 'custom') {\n      throw new Error('Image with src \"' + src + '\" is missing \"loader\" prop.' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader\");\n    }\n  } else {\n    // The user defined a \"loader\" prop or config.\n    // Since the config object is internal only, we\n    // must not pass it to the user-defined \"loader\".\n    const customImageLoader = loader;\n    loader = obj => {\n      const {\n        config: _,\n        ...opts\n      } = obj;\n      return customImageLoader(opts);\n    };\n  }\n  if (layout) {\n    if (layout === 'fill') {\n      fill = true;\n    }\n    const layoutToStyle = {\n      intrinsic: {\n        maxWidth: '100%',\n        height: 'auto'\n      },\n      responsive: {\n        width: '100%',\n        height: 'auto'\n      }\n    };\n    const layoutToSizes = {\n      responsive: '100vw',\n      fill: '100vw'\n    };\n    const layoutStyle = layoutToStyle[layout];\n    if (layoutStyle) {\n      style = {\n        ...style,\n        ...layoutStyle\n      };\n    }\n    const layoutSizes = layoutToSizes[layout];\n    if (layoutSizes && !sizes) {\n      sizes = layoutSizes;\n    }\n  }\n  let staticSrc = '';\n  let widthInt = getInt(width);\n  let heightInt = getInt(height);\n  let blurWidth;\n  let blurHeight;\n  if (isStaticImport(src)) {\n    const staticImageData = isStaticRequire(src) ? src.default : src;\n    if (!staticImageData.src) {\n      throw new Error(\"An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received \" + JSON.stringify(staticImageData));\n    }\n    if (!staticImageData.height || !staticImageData.width) {\n      throw new Error(\"An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received \" + JSON.stringify(staticImageData));\n    }\n    blurWidth = staticImageData.blurWidth;\n    blurHeight = staticImageData.blurHeight;\n    blurDataURL = blurDataURL || staticImageData.blurDataURL;\n    staticSrc = staticImageData.src;\n    if (!fill) {\n      if (!widthInt && !heightInt) {\n        widthInt = staticImageData.width;\n        heightInt = staticImageData.height;\n      } else if (widthInt && !heightInt) {\n        const ratio = widthInt / staticImageData.width;\n        heightInt = Math.round(staticImageData.height * ratio);\n      } else if (!widthInt && heightInt) {\n        const ratio = heightInt / staticImageData.height;\n        widthInt = Math.round(staticImageData.width * ratio);\n      }\n    }\n  }\n  src = typeof src === 'string' ? src : staticSrc;\n  let isLazy = !priority && (loading === 'lazy' || typeof loading === 'undefined');\n  if (!src || src.startsWith('data:') || src.startsWith('blob:')) {\n    // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n    unoptimized = true;\n    isLazy = false;\n  }\n  if (config.unoptimized) {\n    unoptimized = true;\n  }\n  if (isDefaultLoader && src.endsWith('.svg') && !config.dangerouslyAllowSVG) {\n    // Special case to make svg serve as-is to avoid proxying\n    // through the built-in Image Optimization API.\n    unoptimized = true;\n  }\n  const qualityInt = getInt(quality);\n  if (process.env.NODE_ENV !== 'production') {\n    if (config.output === 'export' && isDefaultLoader && !unoptimized) {\n      throw new Error(\"Image Optimization using the default loader is not compatible with `{ output: 'export' }`.\\n  Possible solutions:\\n    - Remove `{ output: 'export' }` and run \\\"next start\\\" to run server mode including the Image Optimization API.\\n    - Configure `{ images: { unoptimized: true } }` in `next.config.js` to disable the Image Optimization API.\\n  Read more: https://nextjs.org/docs/messages/export-image-api\");\n    }\n    if (!src) {\n      // React doesn't show the stack trace and there's\n      // no `src` to help identify which image, so we\n      // instead console.error(ref) during mount.\n      unoptimized = true;\n    } else {\n      if (fill) {\n        if (width) {\n          throw new Error('Image with src \"' + src + '\" has both \"width\" and \"fill\" properties. Only one should be used.');\n        }\n        if (height) {\n          throw new Error('Image with src \"' + src + '\" has both \"height\" and \"fill\" properties. Only one should be used.');\n        }\n        if ((style == null ? void 0 : style.position) && style.position !== 'absolute') {\n          throw new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.position\" properties. Images with \"fill\" always use position absolute - it cannot be modified.');\n        }\n        if ((style == null ? void 0 : style.width) && style.width !== '100%') {\n          throw new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.width\" properties. Images with \"fill\" always use width 100% - it cannot be modified.');\n        }\n        if ((style == null ? void 0 : style.height) && style.height !== '100%') {\n          throw new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.height\" properties. Images with \"fill\" always use height 100% - it cannot be modified.');\n        }\n      } else {\n        if (typeof widthInt === 'undefined') {\n          throw new Error('Image with src \"' + src + '\" is missing required \"width\" property.');\n        } else if (isNaN(widthInt)) {\n          throw new Error('Image with src \"' + src + '\" has invalid \"width\" property. Expected a numeric value in pixels but received \"' + width + '\".');\n        }\n        if (typeof heightInt === 'undefined') {\n          throw new Error('Image with src \"' + src + '\" is missing required \"height\" property.');\n        } else if (isNaN(heightInt)) {\n          throw new Error('Image with src \"' + src + '\" has invalid \"height\" property. Expected a numeric value in pixels but received \"' + height + '\".');\n        }\n        // eslint-disable-next-line no-control-regex\n        if (/^[\\x00-\\x20]/.test(src)) {\n          throw new Error('Image with src \"' + src + '\" cannot start with a space or control character. Use src.trimStart() to remove it or encodeURIComponent(src) to keep it.');\n        }\n        // eslint-disable-next-line no-control-regex\n        if (/[\\x00-\\x20]$/.test(src)) {\n          throw new Error('Image with src \"' + src + '\" cannot end with a space or control character. Use src.trimEnd() to remove it or encodeURIComponent(src) to keep it.');\n        }\n      }\n    }\n    if (!VALID_LOADING_VALUES.includes(loading)) {\n      throw new Error('Image with src \"' + src + '\" has invalid \"loading\" property. Provided \"' + loading + '\" should be one of ' + VALID_LOADING_VALUES.map(String).join(',') + \".\");\n    }\n    if (priority && loading === 'lazy') {\n      throw new Error('Image with src \"' + src + '\" has both \"priority\" and \"loading=\\'lazy\\'\" properties. Only one should be used.');\n    }\n    if (placeholder !== 'empty' && placeholder !== 'blur' && !placeholder.startsWith('data:image/')) {\n      throw new Error('Image with src \"' + src + '\" has invalid \"placeholder\" property \"' + placeholder + '\".');\n    }\n    if (placeholder !== 'empty') {\n      if (widthInt && heightInt && widthInt * heightInt < 1600) {\n        (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is smaller than 40x40. Consider removing the \"placeholder\" property to improve performance.');\n      }\n    }\n    if (placeholder === 'blur' && !blurDataURL) {\n      const VALID_BLUR_EXT = ['jpeg', 'png', 'webp', 'avif'] // should match next-image-loader\n      ;\n      throw new Error('Image with src \"' + src + '\" has \"placeholder=\\'blur\\'\" property but is missing the \"blurDataURL\" property.\\n        Possible solutions:\\n          - Add a \"blurDataURL\" property, the contents should be a small Data URL to represent the image\\n          - Change the \"src\" property to a static import with one of the supported file types: ' + VALID_BLUR_EXT.join(',') + ' (animated images not supported)\\n          - Remove the \"placeholder\" property, effectively no blur effect\\n        Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url');\n    }\n    if ('ref' in rest) {\n      (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is using unsupported \"ref\" property. Consider using the \"onLoad\" property instead.');\n    }\n    if (!unoptimized && !isDefaultLoader) {\n      const urlStr = loader({\n        config,\n        src,\n        width: widthInt || 400,\n        quality: qualityInt || 75\n      });\n      let url;\n      try {\n        url = new URL(urlStr);\n      } catch (err) {}\n      if (urlStr === src || url && url.pathname === src && !url.search) {\n        (0, _warnonce.warnOnce)('Image with src \"' + src + '\" has a \"loader\" property that does not implement width. Please implement it or use the \"unoptimized\" property instead.' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width\");\n      }\n    }\n    if (onLoadingComplete) {\n      (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is using deprecated \"onLoadingComplete\" property. Please use the \"onLoad\" property instead.');\n    }\n    for (const [legacyKey, legacyValue] of Object.entries({\n      layout,\n      objectFit,\n      objectPosition,\n      lazyBoundary,\n      lazyRoot\n    })) {\n      if (legacyValue) {\n        (0, _warnonce.warnOnce)('Image with src \"' + src + '\" has legacy prop \"' + legacyKey + '\". Did you forget to run the codemod?' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-upgrade-to-13\");\n      }\n    }\n    if (typeof window !== 'undefined' && !perfObserver && window.PerformanceObserver) {\n      perfObserver = new PerformanceObserver(entryList => {\n        for (const entry of entryList.getEntries()) {\n          var _entry_element;\n          // @ts-ignore - missing \"LargestContentfulPaint\" class with \"element\" prop\n          const imgSrc = (entry == null ? void 0 : (_entry_element = entry.element) == null ? void 0 : _entry_element.src) || '';\n          const lcpImage = allImgs.get(imgSrc);\n          if (lcpImage && !lcpImage.priority && lcpImage.placeholder === 'empty' && !lcpImage.src.startsWith('data:') && !lcpImage.src.startsWith('blob:')) {\n            // https://web.dev/lcp/#measure-lcp-in-javascript\n            (0, _warnonce.warnOnce)('Image with src \"' + lcpImage.src + '\" was detected as the Largest Contentful Paint (LCP). Please add the \"priority\" property if this image is above the fold.' + \"\\nRead more: https://nextjs.org/docs/api-reference/next/image#priority\");\n          }\n        }\n      });\n      try {\n        perfObserver.observe({\n          type: 'largest-contentful-paint',\n          buffered: true\n        });\n      } catch (err) {\n        // Log error but don't crash the app\n        console.error(err);\n      }\n    }\n  }\n  const imgStyle = Object.assign(fill ? {\n    position: 'absolute',\n    height: '100%',\n    width: '100%',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    objectFit,\n    objectPosition\n  } : {}, showAltText ? {} : {\n    color: 'transparent'\n  }, style);\n  const backgroundImage = !blurComplete && placeholder !== 'empty' ? placeholder === 'blur' ? 'url(\"data:image/svg+xml;charset=utf-8,' + (0, _imageblursvg.getImageBlurSvg)({\n    widthInt,\n    heightInt,\n    blurWidth,\n    blurHeight,\n    blurDataURL: blurDataURL || '',\n    objectFit: imgStyle.objectFit\n  }) + '\")' : 'url(\"' + placeholder + '\")' // assume `data:image/`\n  : null;\n  let placeholderStyle = backgroundImage ? {\n    backgroundSize: imgStyle.objectFit || 'cover',\n    backgroundPosition: imgStyle.objectPosition || '50% 50%',\n    backgroundRepeat: 'no-repeat',\n    backgroundImage\n  } : {};\n  if (process.env.NODE_ENV === 'development') {\n    if (placeholderStyle.backgroundImage && placeholder === 'blur' && (blurDataURL == null ? void 0 : blurDataURL.startsWith('/'))) {\n      // During `next dev`, we don't want to generate blur placeholders with webpack\n      // because it can delay starting the dev server. Instead, `next-image-loader.js`\n      // will inline a special url to lazily generate the blur placeholder at request time.\n      placeholderStyle.backgroundImage = 'url(\"' + blurDataURL + '\")';\n    }\n  }\n  const imgAttributes = generateImgAttrs({\n    config,\n    src,\n    unoptimized,\n    width: widthInt,\n    quality: qualityInt,\n    sizes,\n    loader\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      let fullUrl;\n      try {\n        fullUrl = new URL(imgAttributes.src);\n      } catch (e) {\n        fullUrl = new URL(imgAttributes.src, window.location.href);\n      }\n      allImgs.set(fullUrl.href, {\n        src,\n        priority,\n        placeholder\n      });\n    }\n  }\n  const props = {\n    ...rest,\n    loading: isLazy ? 'lazy' : loading,\n    fetchPriority,\n    width: widthInt,\n    height: heightInt,\n    decoding,\n    className,\n    style: {\n      ...imgStyle,\n      ...placeholderStyle\n    },\n    sizes: imgAttributes.sizes,\n    srcSet: imgAttributes.srcSet,\n    src: overrideSrc || imgAttributes.src\n  };\n  const meta = {\n    unoptimized,\n    priority,\n    placeholder,\n    fill\n  };\n  return {\n    props,\n    meta\n  };\n}","map":{"version":3,"names":["getImgProps","VALID_LOADING_VALUES","undefined","isStaticRequire","src","default","isStaticImageData","isStaticImport","allImgs","Map","perfObserver","getInt","x","Number","isFinite","NaN","test","parseInt","getWidths","param","width","sizes","deviceSizes","allSizes","viewportWidthRe","percentSizes","match","exec","push","length","smallestRatio","Math","min","widths","filter","s","kind","Set","map","w","find","p","generateImgAttrs","config","unoptimized","quality","loader","srcSet","last","i","join","_state","priority","loading","className","height","fill","style","overrideSrc","onLoad","onLoadingComplete","placeholder","blurDataURL","fetchPriority","decoding","layout","objectFit","objectPosition","lazyBoundary","lazyRoot","rest","imgConf","showAltText","blurComplete","defaultLoader","c","_imageconfig","imageConfigDefault","imageSizes","sort","a","b","Error","isDefaultLoader","customImageLoader","obj","_","opts","layoutToStyle","intrinsic","maxWidth","responsive","layoutToSizes","layoutStyle","layoutSizes","staticSrc","widthInt","heightInt","blurWidth","blurHeight","staticImageData","JSON","stringify","ratio","round","isLazy","startsWith","endsWith","dangerouslyAllowSVG","qualityInt","process","env","NODE_ENV","output","position","isNaN","includes","String","_warnonce","warnOnce","VALID_BLUR_EXT","urlStr","url","URL","err","pathname","search","legacyKey","legacyValue","Object","entries","window","PerformanceObserver","entryList","entry","getEntries","_entry_element","imgSrc","element","lcpImage","get","observe","type","buffered","console","error","imgStyle","assign","left","top","right","bottom","color","backgroundImage","_imageblursvg","getImageBlurSvg","placeholderStyle","backgroundSize","backgroundPosition","backgroundRepeat","imgAttributes","fullUrl","e","location","href","set","props","meta"],"sources":["C:\\Users\\Ehsan\\node_modules\\next\\src\\shared\\lib\\get-img-props.ts"],"sourcesContent":["import { warnOnce } from './utils/warn-once'\nimport { getImageBlurSvg } from './image-blur-svg'\nimport { imageConfigDefault } from './image-config'\nimport type {\n  ImageConfigComplete,\n  ImageLoaderProps,\n  ImageLoaderPropsWithConfig,\n} from './image-config'\n\nimport type { JSX } from 'react'\n\nexport interface StaticImageData {\n  src: string\n  height: number\n  width: number\n  blurDataURL?: string\n  blurWidth?: number\n  blurHeight?: number\n}\n\nexport interface StaticRequire {\n  default: StaticImageData\n}\n\nexport type StaticImport = StaticRequire | StaticImageData\n\nexport type ImageProps = Omit<\n  JSX.IntrinsicElements['img'],\n  'src' | 'srcSet' | 'ref' | 'alt' | 'width' | 'height' | 'loading'\n> & {\n  src: string | StaticImport\n  alt: string\n  width?: number | `${number}`\n  height?: number | `${number}`\n  fill?: boolean\n  loader?: ImageLoader\n  quality?: number | `${number}`\n  priority?: boolean\n  loading?: LoadingValue\n  placeholder?: PlaceholderValue\n  blurDataURL?: string\n  unoptimized?: boolean\n  overrideSrc?: string\n  /**\n   * @deprecated Use `onLoad` instead.\n   * @see https://nextjs.org/docs/app/api-reference/components/image#onload\n   */\n  onLoadingComplete?: OnLoadingComplete\n  /**\n   * @deprecated Use `fill` prop instead of `layout=\"fill\"` or change import to `next/legacy/image`.\n   * @see https://nextjs.org/docs/api-reference/next/legacy/image\n   */\n  layout?: string\n  /**\n   * @deprecated Use `style` prop instead.\n   */\n  objectFit?: string\n  /**\n   * @deprecated Use `style` prop instead.\n   */\n  objectPosition?: string\n  /**\n   * @deprecated This prop does not do anything.\n   */\n  lazyBoundary?: string\n  /**\n   * @deprecated This prop does not do anything.\n   */\n  lazyRoot?: string\n}\n\nexport type ImgProps = Omit<ImageProps, 'src' | 'loader'> & {\n  loading: LoadingValue\n  width: number | undefined\n  height: number | undefined\n  style: NonNullable<JSX.IntrinsicElements['img']['style']>\n  sizes: string | undefined\n  srcSet: string | undefined\n  src: string\n}\n\nconst VALID_LOADING_VALUES = ['lazy', 'eager', undefined] as const\ntype LoadingValue = (typeof VALID_LOADING_VALUES)[number]\ntype ImageConfig = ImageConfigComplete & {\n  allSizes: number[]\n  output?: 'standalone' | 'export'\n}\n\nexport type ImageLoader = (p: ImageLoaderProps) => string\n\n// Do not export - this is an internal type only\n// because `next.config.js` is only meant for the\n// built-in loaders, not for a custom loader() prop.\ntype ImageLoaderWithConfig = (p: ImageLoaderPropsWithConfig) => string\n\nexport type PlaceholderValue = 'blur' | 'empty' | `data:image/${string}`\nexport type OnLoad = React.ReactEventHandler<HTMLImageElement> | undefined\nexport type OnLoadingComplete = (img: HTMLImageElement) => void\n\nfunction isStaticRequire(\n  src: StaticRequire | StaticImageData\n): src is StaticRequire {\n  return (src as StaticRequire).default !== undefined\n}\n\nfunction isStaticImageData(\n  src: StaticRequire | StaticImageData\n): src is StaticImageData {\n  return (src as StaticImageData).src !== undefined\n}\n\nfunction isStaticImport(src: string | StaticImport): src is StaticImport {\n  return (\n    !!src &&\n    typeof src === 'object' &&\n    (isStaticRequire(src as StaticImport) ||\n      isStaticImageData(src as StaticImport))\n  )\n}\n\nconst allImgs = new Map<\n  string,\n  { src: string; priority: boolean; placeholder: PlaceholderValue }\n>()\nlet perfObserver: PerformanceObserver | undefined\n\nfunction getInt(x: unknown): number | undefined {\n  if (typeof x === 'undefined') {\n    return x\n  }\n  if (typeof x === 'number') {\n    return Number.isFinite(x) ? x : NaN\n  }\n  if (typeof x === 'string' && /^[0-9]+$/.test(x)) {\n    return parseInt(x, 10)\n  }\n  return NaN\n}\n\nfunction getWidths(\n  { deviceSizes, allSizes }: ImageConfig,\n  width: number | undefined,\n  sizes: string | undefined\n): { widths: number[]; kind: 'w' | 'x' } {\n  if (sizes) {\n    // Find all the \"vw\" percent sizes used in the sizes prop\n    const viewportWidthRe = /(^|\\s)(1?\\d?\\d)vw/g\n    const percentSizes = []\n    for (let match; (match = viewportWidthRe.exec(sizes)); match) {\n      percentSizes.push(parseInt(match[2]))\n    }\n    if (percentSizes.length) {\n      const smallestRatio = Math.min(...percentSizes) * 0.01\n      return {\n        widths: allSizes.filter((s) => s >= deviceSizes[0] * smallestRatio),\n        kind: 'w',\n      }\n    }\n    return { widths: allSizes, kind: 'w' }\n  }\n  if (typeof width !== 'number') {\n    return { widths: deviceSizes, kind: 'w' }\n  }\n\n  const widths = [\n    ...new Set(\n      // > This means that most OLED screens that say they are 3x resolution,\n      // > are actually 3x in the green color, but only 1.5x in the red and\n      // > blue colors. Showing a 3x resolution image in the app vs a 2x\n      // > resolution image will be visually the same, though the 3x image\n      // > takes significantly more data. Even true 3x resolution screens are\n      // > wasteful as the human eye cannot see that level of detail without\n      // > something like a magnifying glass.\n      // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\n      [width, width * 2 /*, width * 3*/].map(\n        (w) => allSizes.find((p) => p >= w) || allSizes[allSizes.length - 1]\n      )\n    ),\n  ]\n  return { widths, kind: 'x' }\n}\n\ntype GenImgAttrsData = {\n  config: ImageConfig\n  src: string\n  unoptimized: boolean\n  loader: ImageLoaderWithConfig\n  width?: number\n  quality?: number\n  sizes?: string\n}\n\ntype GenImgAttrsResult = {\n  src: string\n  srcSet: string | undefined\n  sizes: string | undefined\n}\n\nfunction generateImgAttrs({\n  config,\n  src,\n  unoptimized,\n  width,\n  quality,\n  sizes,\n  loader,\n}: GenImgAttrsData): GenImgAttrsResult {\n  if (unoptimized) {\n    return { src, srcSet: undefined, sizes: undefined }\n  }\n\n  const { widths, kind } = getWidths(config, width, sizes)\n  const last = widths.length - 1\n\n  return {\n    sizes: !sizes && kind === 'w' ? '100vw' : sizes,\n    srcSet: widths\n      .map(\n        (w, i) =>\n          `${loader({ config, src, quality, width: w })} ${\n            kind === 'w' ? w : i + 1\n          }${kind}`\n      )\n      .join(', '),\n\n    // It's intended to keep `src` the last attribute because React updates\n    // attributes in order. If we keep `src` the first one, Safari will\n    // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n    // updated by React. That causes multiple unnecessary requests if `srcSet`\n    // and `sizes` are defined.\n    // This bug cannot be reproduced in Chrome or Firefox.\n    src: loader({ config, src, quality, width: widths[last] }),\n  }\n}\n\n/**\n * A shared function, used on both client and server, to generate the props for <img>.\n */\nexport function getImgProps(\n  {\n    src,\n    sizes,\n    unoptimized = false,\n    priority = false,\n    loading,\n    className,\n    quality,\n    width,\n    height,\n    fill = false,\n    style,\n    overrideSrc,\n    onLoad,\n    onLoadingComplete,\n    placeholder = 'empty',\n    blurDataURL,\n    fetchPriority,\n    decoding = 'async',\n    layout,\n    objectFit,\n    objectPosition,\n    lazyBoundary,\n    lazyRoot,\n    ...rest\n  }: ImageProps,\n  _state: {\n    defaultLoader: ImageLoaderWithConfig\n    imgConf: ImageConfigComplete\n    showAltText?: boolean\n    blurComplete?: boolean\n  }\n): {\n  props: ImgProps\n  meta: {\n    unoptimized: boolean\n    priority: boolean\n    placeholder: NonNullable<ImageProps['placeholder']>\n    fill: boolean\n  }\n} {\n  const { imgConf, showAltText, blurComplete, defaultLoader } = _state\n  let config: ImageConfig\n  let c = imgConf || imageConfigDefault\n  if ('allSizes' in c) {\n    config = c as ImageConfig\n  } else {\n    const allSizes = [...c.deviceSizes, ...c.imageSizes].sort((a, b) => a - b)\n    const deviceSizes = c.deviceSizes.sort((a, b) => a - b)\n    config = { ...c, allSizes, deviceSizes }\n  }\n\n  if (typeof defaultLoader === 'undefined') {\n    throw new Error(\n      'images.loaderFile detected but the file is missing default export.\\nRead more: https://nextjs.org/docs/messages/invalid-images-config'\n    )\n  }\n  let loader: ImageLoaderWithConfig = rest.loader || defaultLoader\n\n  // Remove property so it's not spread on <img> element\n  delete rest.loader\n  delete (rest as any).srcSet\n\n  // This special value indicates that the user\n  // didn't define a \"loader\" prop or \"loader\" config.\n  const isDefaultLoader = '__next_img_default' in loader\n\n  if (isDefaultLoader) {\n    if (config.loader === 'custom') {\n      throw new Error(\n        `Image with src \"${src}\" is missing \"loader\" prop.` +\n          `\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader`\n      )\n    }\n  } else {\n    // The user defined a \"loader\" prop or config.\n    // Since the config object is internal only, we\n    // must not pass it to the user-defined \"loader\".\n    const customImageLoader = loader as ImageLoader\n    loader = (obj) => {\n      const { config: _, ...opts } = obj\n      return customImageLoader(opts)\n    }\n  }\n\n  if (layout) {\n    if (layout === 'fill') {\n      fill = true\n    }\n    const layoutToStyle: Record<string, Record<string, string> | undefined> = {\n      intrinsic: { maxWidth: '100%', height: 'auto' },\n      responsive: { width: '100%', height: 'auto' },\n    }\n    const layoutToSizes: Record<string, string | undefined> = {\n      responsive: '100vw',\n      fill: '100vw',\n    }\n    const layoutStyle = layoutToStyle[layout]\n    if (layoutStyle) {\n      style = { ...style, ...layoutStyle }\n    }\n    const layoutSizes = layoutToSizes[layout]\n    if (layoutSizes && !sizes) {\n      sizes = layoutSizes\n    }\n  }\n\n  let staticSrc = ''\n  let widthInt = getInt(width)\n  let heightInt = getInt(height)\n  let blurWidth: number | undefined\n  let blurHeight: number | undefined\n  if (isStaticImport(src)) {\n    const staticImageData = isStaticRequire(src) ? src.default : src\n\n    if (!staticImageData.src) {\n      throw new Error(\n        `An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received ${JSON.stringify(\n          staticImageData\n        )}`\n      )\n    }\n    if (!staticImageData.height || !staticImageData.width) {\n      throw new Error(\n        `An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received ${JSON.stringify(\n          staticImageData\n        )}`\n      )\n    }\n\n    blurWidth = staticImageData.blurWidth\n    blurHeight = staticImageData.blurHeight\n    blurDataURL = blurDataURL || staticImageData.blurDataURL\n    staticSrc = staticImageData.src\n\n    if (!fill) {\n      if (!widthInt && !heightInt) {\n        widthInt = staticImageData.width\n        heightInt = staticImageData.height\n      } else if (widthInt && !heightInt) {\n        const ratio = widthInt / staticImageData.width\n        heightInt = Math.round(staticImageData.height * ratio)\n      } else if (!widthInt && heightInt) {\n        const ratio = heightInt / staticImageData.height\n        widthInt = Math.round(staticImageData.width * ratio)\n      }\n    }\n  }\n  src = typeof src === 'string' ? src : staticSrc\n\n  let isLazy =\n    !priority && (loading === 'lazy' || typeof loading === 'undefined')\n  if (!src || src.startsWith('data:') || src.startsWith('blob:')) {\n    // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n    unoptimized = true\n    isLazy = false\n  }\n  if (config.unoptimized) {\n    unoptimized = true\n  }\n  if (isDefaultLoader && src.endsWith('.svg') && !config.dangerouslyAllowSVG) {\n    // Special case to make svg serve as-is to avoid proxying\n    // through the built-in Image Optimization API.\n    unoptimized = true\n  }\n\n  const qualityInt = getInt(quality)\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (config.output === 'export' && isDefaultLoader && !unoptimized) {\n      throw new Error(\n        `Image Optimization using the default loader is not compatible with \\`{ output: 'export' }\\`.\n  Possible solutions:\n    - Remove \\`{ output: 'export' }\\` and run \"next start\" to run server mode including the Image Optimization API.\n    - Configure \\`{ images: { unoptimized: true } }\\` in \\`next.config.js\\` to disable the Image Optimization API.\n  Read more: https://nextjs.org/docs/messages/export-image-api`\n      )\n    }\n    if (!src) {\n      // React doesn't show the stack trace and there's\n      // no `src` to help identify which image, so we\n      // instead console.error(ref) during mount.\n      unoptimized = true\n    } else {\n      if (fill) {\n        if (width) {\n          throw new Error(\n            `Image with src \"${src}\" has both \"width\" and \"fill\" properties. Only one should be used.`\n          )\n        }\n        if (height) {\n          throw new Error(\n            `Image with src \"${src}\" has both \"height\" and \"fill\" properties. Only one should be used.`\n          )\n        }\n        if (style?.position && style.position !== 'absolute') {\n          throw new Error(\n            `Image with src \"${src}\" has both \"fill\" and \"style.position\" properties. Images with \"fill\" always use position absolute - it cannot be modified.`\n          )\n        }\n        if (style?.width && style.width !== '100%') {\n          throw new Error(\n            `Image with src \"${src}\" has both \"fill\" and \"style.width\" properties. Images with \"fill\" always use width 100% - it cannot be modified.`\n          )\n        }\n        if (style?.height && style.height !== '100%') {\n          throw new Error(\n            `Image with src \"${src}\" has both \"fill\" and \"style.height\" properties. Images with \"fill\" always use height 100% - it cannot be modified.`\n          )\n        }\n      } else {\n        if (typeof widthInt === 'undefined') {\n          throw new Error(\n            `Image with src \"${src}\" is missing required \"width\" property.`\n          )\n        } else if (isNaN(widthInt)) {\n          throw new Error(\n            `Image with src \"${src}\" has invalid \"width\" property. Expected a numeric value in pixels but received \"${width}\".`\n          )\n        }\n        if (typeof heightInt === 'undefined') {\n          throw new Error(\n            `Image with src \"${src}\" is missing required \"height\" property.`\n          )\n        } else if (isNaN(heightInt)) {\n          throw new Error(\n            `Image with src \"${src}\" has invalid \"height\" property. Expected a numeric value in pixels but received \"${height}\".`\n          )\n        }\n        // eslint-disable-next-line no-control-regex\n        if (/^[\\x00-\\x20]/.test(src)) {\n          throw new Error(\n            `Image with src \"${src}\" cannot start with a space or control character. Use src.trimStart() to remove it or encodeURIComponent(src) to keep it.`\n          )\n        }\n        // eslint-disable-next-line no-control-regex\n        if (/[\\x00-\\x20]$/.test(src)) {\n          throw new Error(\n            `Image with src \"${src}\" cannot end with a space or control character. Use src.trimEnd() to remove it or encodeURIComponent(src) to keep it.`\n          )\n        }\n      }\n    }\n    if (!VALID_LOADING_VALUES.includes(loading)) {\n      throw new Error(\n        `Image with src \"${src}\" has invalid \"loading\" property. Provided \"${loading}\" should be one of ${VALID_LOADING_VALUES.map(\n          String\n        ).join(',')}.`\n      )\n    }\n    if (priority && loading === 'lazy') {\n      throw new Error(\n        `Image with src \"${src}\" has both \"priority\" and \"loading='lazy'\" properties. Only one should be used.`\n      )\n    }\n    if (\n      placeholder !== 'empty' &&\n      placeholder !== 'blur' &&\n      !placeholder.startsWith('data:image/')\n    ) {\n      throw new Error(\n        `Image with src \"${src}\" has invalid \"placeholder\" property \"${placeholder}\".`\n      )\n    }\n    if (placeholder !== 'empty') {\n      if (widthInt && heightInt && widthInt * heightInt < 1600) {\n        warnOnce(\n          `Image with src \"${src}\" is smaller than 40x40. Consider removing the \"placeholder\" property to improve performance.`\n        )\n      }\n    }\n    if (placeholder === 'blur' && !blurDataURL) {\n      const VALID_BLUR_EXT = ['jpeg', 'png', 'webp', 'avif'] // should match next-image-loader\n\n      throw new Error(\n        `Image with src \"${src}\" has \"placeholder='blur'\" property but is missing the \"blurDataURL\" property.\n        Possible solutions:\n          - Add a \"blurDataURL\" property, the contents should be a small Data URL to represent the image\n          - Change the \"src\" property to a static import with one of the supported file types: ${VALID_BLUR_EXT.join(\n            ','\n          )} (animated images not supported)\n          - Remove the \"placeholder\" property, effectively no blur effect\n        Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url`\n      )\n    }\n    if ('ref' in rest) {\n      warnOnce(\n        `Image with src \"${src}\" is using unsupported \"ref\" property. Consider using the \"onLoad\" property instead.`\n      )\n    }\n\n    if (!unoptimized && !isDefaultLoader) {\n      const urlStr = loader({\n        config,\n        src,\n        width: widthInt || 400,\n        quality: qualityInt || 75,\n      })\n      let url: URL | undefined\n      try {\n        url = new URL(urlStr)\n      } catch (err) {}\n      if (urlStr === src || (url && url.pathname === src && !url.search)) {\n        warnOnce(\n          `Image with src \"${src}\" has a \"loader\" property that does not implement width. Please implement it or use the \"unoptimized\" property instead.` +\n            `\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width`\n        )\n      }\n    }\n\n    if (onLoadingComplete) {\n      warnOnce(\n        `Image with src \"${src}\" is using deprecated \"onLoadingComplete\" property. Please use the \"onLoad\" property instead.`\n      )\n    }\n\n    for (const [legacyKey, legacyValue] of Object.entries({\n      layout,\n      objectFit,\n      objectPosition,\n      lazyBoundary,\n      lazyRoot,\n    })) {\n      if (legacyValue) {\n        warnOnce(\n          `Image with src \"${src}\" has legacy prop \"${legacyKey}\". Did you forget to run the codemod?` +\n            `\\nRead more: https://nextjs.org/docs/messages/next-image-upgrade-to-13`\n        )\n      }\n    }\n\n    if (\n      typeof window !== 'undefined' &&\n      !perfObserver &&\n      window.PerformanceObserver\n    ) {\n      perfObserver = new PerformanceObserver((entryList) => {\n        for (const entry of entryList.getEntries()) {\n          // @ts-ignore - missing \"LargestContentfulPaint\" class with \"element\" prop\n          const imgSrc = entry?.element?.src || ''\n          const lcpImage = allImgs.get(imgSrc)\n          if (\n            lcpImage &&\n            !lcpImage.priority &&\n            lcpImage.placeholder === 'empty' &&\n            !lcpImage.src.startsWith('data:') &&\n            !lcpImage.src.startsWith('blob:')\n          ) {\n            // https://web.dev/lcp/#measure-lcp-in-javascript\n            warnOnce(\n              `Image with src \"${lcpImage.src}\" was detected as the Largest Contentful Paint (LCP). Please add the \"priority\" property if this image is above the fold.` +\n                `\\nRead more: https://nextjs.org/docs/api-reference/next/image#priority`\n            )\n          }\n        }\n      })\n      try {\n        perfObserver.observe({\n          type: 'largest-contentful-paint',\n          buffered: true,\n        })\n      } catch (err) {\n        // Log error but don't crash the app\n        console.error(err)\n      }\n    }\n  }\n  const imgStyle = Object.assign(\n    fill\n      ? {\n          position: 'absolute',\n          height: '100%',\n          width: '100%',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          objectFit,\n          objectPosition,\n        }\n      : {},\n    showAltText ? {} : { color: 'transparent' },\n    style\n  )\n\n  const backgroundImage =\n    !blurComplete && placeholder !== 'empty'\n      ? placeholder === 'blur'\n        ? `url(\"data:image/svg+xml;charset=utf-8,${getImageBlurSvg({\n            widthInt,\n            heightInt,\n            blurWidth,\n            blurHeight,\n            blurDataURL: blurDataURL || '', // assume not undefined\n            objectFit: imgStyle.objectFit,\n          })}\")`\n        : `url(\"${placeholder}\")` // assume `data:image/`\n      : null\n\n  let placeholderStyle = backgroundImage\n    ? {\n        backgroundSize: imgStyle.objectFit || 'cover',\n        backgroundPosition: imgStyle.objectPosition || '50% 50%',\n        backgroundRepeat: 'no-repeat',\n        backgroundImage,\n      }\n    : {}\n\n  if (process.env.NODE_ENV === 'development') {\n    if (\n      placeholderStyle.backgroundImage &&\n      placeholder === 'blur' &&\n      blurDataURL?.startsWith('/')\n    ) {\n      // During `next dev`, we don't want to generate blur placeholders with webpack\n      // because it can delay starting the dev server. Instead, `next-image-loader.js`\n      // will inline a special url to lazily generate the blur placeholder at request time.\n      placeholderStyle.backgroundImage = `url(\"${blurDataURL}\")`\n    }\n  }\n\n  const imgAttributes = generateImgAttrs({\n    config,\n    src,\n    unoptimized,\n    width: widthInt,\n    quality: qualityInt,\n    sizes,\n    loader,\n  })\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      let fullUrl: URL\n      try {\n        fullUrl = new URL(imgAttributes.src)\n      } catch (e) {\n        fullUrl = new URL(imgAttributes.src, window.location.href)\n      }\n      allImgs.set(fullUrl.href, { src, priority, placeholder })\n    }\n  }\n\n  const props: ImgProps = {\n    ...rest,\n    loading: isLazy ? 'lazy' : loading,\n    fetchPriority,\n    width: widthInt,\n    height: heightInt,\n    decoding,\n    className,\n    style: { ...imgStyle, ...placeholderStyle },\n    sizes: imgAttributes.sizes,\n    srcSet: imgAttributes.srcSet,\n    src: overrideSrc || imgAttributes.src,\n  }\n  const meta = { unoptimized, priority, placeholder, fill }\n  return { props, meta }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}