{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _default;\n  }\n});\nfunction defaultLoader(param) {\n  let {\n    config,\n    src,\n    width,\n    quality\n  } = param;\n  if (process.env.NODE_ENV !== 'production') {\n    const missingValues = [];\n    // these should always be provided but make sure they are\n    if (!src) missingValues.push('src');\n    if (!width) missingValues.push('width');\n    if (missingValues.length > 0) {\n      throw new Error(\"Next Image Optimization requires \" + missingValues.join(', ') + \" to be provided. Make sure you pass them as props to the `next/image` component. Received: \" + JSON.stringify({\n        src,\n        width,\n        quality\n      }));\n    }\n    if (src.startsWith('//')) {\n      throw new Error('Failed to parse src \"' + src + '\" on `next/image`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)');\n    }\n    if (src.startsWith('/') && config.localPatterns) {\n      if (process.env.NODE_ENV !== 'test' &&\n      // micromatch isn't compatible with edge runtime\n      process.env.NEXT_RUNTIME !== 'edge') {\n        // We use dynamic require because this should only error in development\n        const {\n          hasLocalMatch\n        } = require('./match-local-pattern');\n        if (!hasLocalMatch(config.localPatterns, src)) {\n          throw new Error(\"Invalid src prop (\" + src + \") on `next/image` does not match `images.localPatterns` configured in your `next.config.js`\\n\" + \"See more info: https://nextjs.org/docs/messages/next-image-unconfigured-localpatterns\");\n        }\n      }\n    }\n    if (!src.startsWith('/') && (config.domains || config.remotePatterns)) {\n      let parsedSrc;\n      try {\n        parsedSrc = new URL(src);\n      } catch (err) {\n        console.error(err);\n        throw new Error('Failed to parse src \"' + src + '\" on `next/image`, if using relative image it must start with a leading slash \"/\" or be an absolute URL (http:// or https://)');\n      }\n      if (process.env.NODE_ENV !== 'test' &&\n      // micromatch isn't compatible with edge runtime\n      process.env.NEXT_RUNTIME !== 'edge') {\n        // We use dynamic require because this should only error in development\n        const {\n          hasRemoteMatch\n        } = require('./match-remote-pattern');\n        if (!hasRemoteMatch(config.domains, config.remotePatterns, parsedSrc)) {\n          throw new Error(\"Invalid src prop (\" + src + ') on `next/image`, hostname \"' + parsedSrc.hostname + '\" is not configured under images in your `next.config.js`\\n' + \"See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host\");\n        }\n      }\n    }\n  }\n  return config.path + \"?url=\" + encodeURIComponent(src) + \"&w=\" + width + \"&q=\" + (quality || 75) + (process.env.NEXT_DEPLOYMENT_ID ? \"&dpl=\" + process.env.NEXT_DEPLOYMENT_ID : '');\n}\n// We use this to determine if the import is the default loader\n// or a custom loader defined by the user in next.config.js\ndefaultLoader.__next_img_default = true;\nconst _default = defaultLoader;","map":{"version":3,"names":["_default","defaultLoader","param","config","src","width","quality","process","env","NODE_ENV","missingValues","push","length","Error","join","JSON","stringify","startsWith","localPatterns","NEXT_RUNTIME","hasLocalMatch","require","domains","remotePatterns","parsedSrc","URL","err","console","error","hasRemoteMatch","hostname","path","encodeURIComponent","NEXT_DEPLOYMENT_ID","__next_img_default"],"sources":["C:\\Users\\Ehsan\\node_modules\\next\\src\\shared\\lib\\image-loader.ts"],"sourcesContent":["import type { ImageLoaderPropsWithConfig } from './image-config'\n\nfunction defaultLoader({\n  config,\n  src,\n  width,\n  quality,\n}: ImageLoaderPropsWithConfig): string {\n  if (process.env.NODE_ENV !== 'production') {\n    const missingValues = []\n\n    // these should always be provided but make sure they are\n    if (!src) missingValues.push('src')\n    if (!width) missingValues.push('width')\n\n    if (missingValues.length > 0) {\n      throw new Error(\n        `Next Image Optimization requires ${missingValues.join(\n          ', '\n        )} to be provided. Make sure you pass them as props to the \\`next/image\\` component. Received: ${JSON.stringify(\n          { src, width, quality }\n        )}`\n      )\n    }\n\n    if (src.startsWith('//')) {\n      throw new Error(\n        `Failed to parse src \"${src}\" on \\`next/image\\`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)`\n      )\n    }\n\n    if (src.startsWith('/') && config.localPatterns) {\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        // micromatch isn't compatible with edge runtime\n        process.env.NEXT_RUNTIME !== 'edge'\n      ) {\n        // We use dynamic require because this should only error in development\n        const { hasLocalMatch } = require('./match-local-pattern')\n        if (!hasLocalMatch(config.localPatterns, src)) {\n          throw new Error(\n            `Invalid src prop (${src}) on \\`next/image\\` does not match \\`images.localPatterns\\` configured in your \\`next.config.js\\`\\n` +\n              `See more info: https://nextjs.org/docs/messages/next-image-unconfigured-localpatterns`\n          )\n        }\n      }\n    }\n\n    if (!src.startsWith('/') && (config.domains || config.remotePatterns)) {\n      let parsedSrc: URL\n      try {\n        parsedSrc = new URL(src)\n      } catch (err) {\n        console.error(err)\n        throw new Error(\n          `Failed to parse src \"${src}\" on \\`next/image\\`, if using relative image it must start with a leading slash \"/\" or be an absolute URL (http:// or https://)`\n        )\n      }\n\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        // micromatch isn't compatible with edge runtime\n        process.env.NEXT_RUNTIME !== 'edge'\n      ) {\n        // We use dynamic require because this should only error in development\n        const { hasRemoteMatch } = require('./match-remote-pattern')\n        if (!hasRemoteMatch(config.domains, config.remotePatterns, parsedSrc)) {\n          throw new Error(\n            `Invalid src prop (${src}) on \\`next/image\\`, hostname \"${parsedSrc.hostname}\" is not configured under images in your \\`next.config.js\\`\\n` +\n              `See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host`\n          )\n        }\n      }\n    }\n  }\n\n  return `${config.path}?url=${encodeURIComponent(src)}&w=${width}&q=${\n    quality || 75\n  }${\n    process.env.NEXT_DEPLOYMENT_ID\n      ? `&dpl=${process.env.NEXT_DEPLOYMENT_ID}`\n      : ''\n  }`\n}\n\n// We use this to determine if the import is the default loader\n// or a custom loader defined by the user in next.config.js\ndefaultLoader.__next_img_default = true\n\nexport default defaultLoader\n"],"mappings":";;;;;+BAyFA;;;WAAAA,QAAA;;;AAvFA,SAASC,cAAcC,KAKM;EALN;IACrBC,MAAM;IACNC,GAAG;IACHC,KAAK;IACLC;EAAO,CACoB,GALNJ,KAAA;EAMrB,IAAIK,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;IACzC,MAAMC,aAAA,GAAgB,EAAE;IAExB;IACA,IAAI,CAACN,GAAA,EAAKM,aAAA,CAAcC,IAAI,CAAC;IAC7B,IAAI,CAACN,KAAA,EAAOK,aAAA,CAAcC,IAAI,CAAC;IAE/B,IAAID,aAAA,CAAcE,MAAM,GAAG,GAAG;MAC5B,MAAM,IAAIC,KAAA,CACR,mCAAC,GAAmCH,aAAA,CAAcI,IAAI,CACpD,QACA,gGAA+FC,IAAA,CAAKC,SAAS,CAC7G;QAAEZ,GAAA;QAAKC,KAAA;QAAOC;MAAQ;IAG5B;IAEA,IAAIF,GAAA,CAAIa,UAAU,CAAC,OAAO;MACxB,MAAM,IAAIJ,KAAA,CACR,uBAAC,GAAuBT,GAAA,GAAI;IAEhC;IAEA,IAAIA,GAAA,CAAIa,UAAU,CAAC,QAAQd,MAAA,CAAOe,aAAa,EAAE;MAC/C,IACEX,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK;MACzB;MACAF,OAAA,CAAQC,GAAG,CAACW,YAAY,KAAK,QAC7B;QACA;QACA,MAAM;UAAEC;QAAa,CAAE,GAAGC,OAAA,CAAQ;QAClC,IAAI,CAACD,aAAA,CAAcjB,MAAA,CAAOe,aAAa,EAAEd,GAAA,GAAM;UAC7C,MAAM,IAAIS,KAAA,CACR,oBAAC,GAAoBT,GAAA,GAAI,kGACtB;QAEP;MACF;IACF;IAEA,IAAI,CAACA,GAAA,CAAIa,UAAU,CAAC,SAASd,MAAA,CAAOmB,OAAO,IAAInB,MAAA,CAAOoB,cAAc,CAAD,EAAI;MACrE,IAAIC,SAAA;MACJ,IAAI;QACFA,SAAA,GAAY,IAAIC,GAAA,CAAIrB,GAAA;MACtB,EAAE,OAAOsB,GAAA,EAAK;QACZC,OAAA,CAAQC,KAAK,CAACF,GAAA;QACd,MAAM,IAAIb,KAAA,CACR,uBAAC,GAAuBT,GAAA,GAAI;MAEhC;MAEA,IACEG,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK;MACzB;MACAF,OAAA,CAAQC,GAAG,CAACW,YAAY,KAAK,QAC7B;QACA;QACA,MAAM;UAAEU;QAAc,CAAE,GAAGR,OAAA,CAAQ;QACnC,IAAI,CAACQ,cAAA,CAAe1B,MAAA,CAAOmB,OAAO,EAAEnB,MAAA,CAAOoB,cAAc,EAAEC,SAAA,GAAY;UACrE,MAAM,IAAIX,KAAA,CACR,oBAAC,GAAoBT,GAAA,GAAI,kCAAiCoB,SAAA,CAAUM,QAAQ,GAAC,gEAC1E;QAEP;MACF;IACF;EACF;EAEA,OAAO3B,MAAG,CAAO4B,IAAI,GAAC,UAAOC,kBAAA,CAAmB5B,GAAA,IAAK,QAAKC,KAAA,GAAM,SAC9DC,OAAA,IAAW,EAAC,KAEZC,OAAA,CAAQC,GAAG,CAACyB,kBAAkB,GAC1B,OAAC,GAAO1B,OAAA,CAAQC,GAAG,CAACyB,kBAAkB,GACtC,EAAC;AAET;AAEA;AACA;AACAhC,aAAA,CAAciC,kBAAkB,GAAG;MAEnClC,QAAA,GAAeC,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}