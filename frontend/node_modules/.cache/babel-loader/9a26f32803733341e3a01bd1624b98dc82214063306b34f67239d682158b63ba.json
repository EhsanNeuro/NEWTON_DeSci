{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ehsan\\\\newton-beta\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useLayoutEffect } from 'react';\nimport '@telegram-apps/telegram-ui/dist/styles.css';\nimport { AppRoot, List, Chip, Avatar, Image } from '@telegram-apps/telegram-ui';\nimport { MyTabbar } from './components/MyTabbar';\nimport NewtonLogo from '../src/images/apologonobg.png';\nimport LoadingImage from '../src/images/loading-image.png'; // Example loading page image\nimport LoadingPage from './components/LoadingPage';\n\n// Preload utility function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst preloadImages = imageUrls => {\n  return Promise.all(imageUrls.map(url => new Promise((resolve, reject) => {\n    const img = new Image();\n    img.src = url;\n    img.onload = resolve;\n    img.onerror = reject;\n  })));\n};\nexport const App = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  useLayoutEffect(() => {\n    const loadAppData = async () => {\n      const startTime = Date.now(); // Record start time\n\n      try {\n        // List of images to preload\n        const imageUrls = [NewtonLogo, LoadingImage];\n\n        // Preload loading page image first\n        await preloadImages([LoadingImage]);\n\n        // Preload remaining images and simulate other async tasks\n        await Promise.all([preloadImages(imageUrls), new Promise(resolve => setTimeout(resolve, 2000)) // Simulate data loading\n        ]);\n      } catch (error) {\n        console.error('Error loading resources:', error);\n      } finally {\n        // Ensure the loading page is shown for at least 2 seconds\n        const elapsedTime = Date.now() - startTime;\n        const minimumDisplayTime = 2000; // 2 seconds\n\n        if (elapsedTime < minimumDisplayTime) {\n          setTimeout(() => setIsLoading(false), minimumDisplayTime - elapsedTime);\n        } else {\n          setIsLoading(false);\n        }\n      }\n    };\n    loadAppData();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(AppRoot, {\n      children: /*#__PURE__*/_jsxDEV(LoadingPage, {\n        imageSrc: LoadingImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AppRoot, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100vh',\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        style: {\n          background: 'var(--tgui--secondary_bg_color)',\n          padding: 10,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexShrink: 0\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: 25,\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Chip, {\n            mode: \"elevated\",\n            before: /*#__PURE__*/_jsxDEV(Avatar, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 43\n            }, this),\n            children: \"Ehsan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Image, {\n            size: 64,\n            src: NewtonLogo,\n            alt: \"Newton Logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            mode: \"outline\",\n            before: /*#__PURE__*/_jsxDEV(Avatar, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 42\n            }, this),\n            children: \"5000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MyTabbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"whBsFxpbZq/2opMVupZFAUyWAmY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useLayoutEffect","AppRoot","List","Chip","Avatar","Image","MyTabbar","NewtonLogo","LoadingImage","LoadingPage","jsxDEV","_jsxDEV","preloadImages","imageUrls","Promise","all","map","url","resolve","reject","img","src","onload","onerror","App","_s","isLoading","setIsLoading","loadAppData","startTime","Date","now","setTimeout","error","console","elapsedTime","minimumDisplayTime","children","imageSrc","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexDirection","height","overflow","background","padding","justifyContent","alignItems","flexShrink","gap","mode","before","size","alt","_c","$RefreshReg$"],"sources":["C:/Users/Ehsan/newton-beta/src/App.js"],"sourcesContent":["import React, { useState, useLayoutEffect } from 'react';\nimport '@telegram-apps/telegram-ui/dist/styles.css';\nimport { AppRoot, List, Chip, Avatar, Image } from '@telegram-apps/telegram-ui';\nimport { MyTabbar } from './components/MyTabbar';\nimport NewtonLogo from '../src/images/apologonobg.png';\nimport LoadingImage from '../src/images/loading-image.png'; // Example loading page image\nimport LoadingPage from './components/LoadingPage';\n\n// Preload utility function\nconst preloadImages = (imageUrls) => {\n  return Promise.all(\n    imageUrls.map((url) =>\n      new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = url;\n        img.onload = resolve;\n        img.onerror = reject;\n      })\n    )\n  );\n};\n\nexport const App = () => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useLayoutEffect(() => {\n    const loadAppData = async () => {\n      const startTime = Date.now(); // Record start time\n\n      try {\n        // List of images to preload\n        const imageUrls = [NewtonLogo, LoadingImage];\n\n        // Preload loading page image first\n        await preloadImages([LoadingImage]);\n\n        // Preload remaining images and simulate other async tasks\n        await Promise.all([\n          preloadImages(imageUrls),\n          new Promise((resolve) => setTimeout(resolve, 2000)) // Simulate data loading\n        ]);\n      } catch (error) {\n        console.error('Error loading resources:', error);\n      } finally {\n        // Ensure the loading page is shown for at least 2 seconds\n        const elapsedTime = Date.now() - startTime;\n        const minimumDisplayTime = 2000; // 2 seconds\n\n        if (elapsedTime < minimumDisplayTime) {\n          setTimeout(() => setIsLoading(false), minimumDisplayTime - elapsedTime);\n        } else {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadAppData();\n  }, []);\n\n  if (isLoading) {\n    return (\n      <AppRoot>\n        <LoadingPage imageSrc={LoadingImage} />  \n      </AppRoot>\n    );\n  }\n\n  return (\n    <AppRoot>\n      <div style={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100vh',\n        overflow: 'hidden'\n      }}>\n        {/* Fixed Header */}\n        <List style={{\n          background: 'var(--tgui--secondary_bg_color)',\n          padding: 10,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexShrink: 0\n        }}>\n          <div style={{\n            display: 'flex',\n            gap: 25,\n            alignItems: 'center'\n          }}>\n            <Chip mode=\"elevated\" before={<Avatar size={20} />}>\n              Ehsan\n            </Chip>\n            <Image\n              size={64}\n              src={NewtonLogo}\n              alt=\"Newton Logo\"\n            />\n            <Chip mode=\"outline\" before={<Avatar size={20} />}>\n              5000\n            </Chip>\n          </div>\n        </List>\n\n        <MyTabbar />\n      </div>\n    </AppRoot>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}