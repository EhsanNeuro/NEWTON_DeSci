import { RGB } from '../../colors';
import { JsonParser } from './types';
/**
 * Converts value received from some JSON to Record<string, unknown>.
 * @param value - raw value.
 * @throws {TypeError} Value has incorrect type.
 */
export declare const parseJsonParamAsRecord: JsonParser<Record<string, unknown>>;
/**
 * Converts value received from some JSON to number.
 * @param value - raw value.
 * @throws {TypeError} Value has incorrect type.
 */
export declare const parseJsonParamAsNum: JsonParser<number>;
/**
 * Converts value received from some JSON to number or undefined.
 * @param value - raw value.
 * @throws {TypeError} Value has incorrect type.
 */
export declare const parseJsonParamAsOptNum: JsonParser<number | null>;
/**
 * Converts value received from some JSON to string.
 * @param value - raw value.
 * @throws {TypeError} Value has incorrect type.
 */
export declare const parseJsonParamAsString: JsonParser<string>;
/**
 * Converts value received from some JSON to string or undefined.
 * @param value - raw value.
 * @throws {TypeError} Value has incorrect type.
 */
export declare const parseJsonParamAsOptString: JsonParser<string | undefined>;
/**
 * Converts value received from some JSON to boolean.
 * @param value - raw value.
 * @throws {TypeError} Value has incorrect type.
 */
export declare const parseJsonParamAsBool: JsonParser<boolean>;
/**
 * Converts value received from some JSON to boolean or undefined.
 * @param value - raw value.
 */
export declare const parseJsonParamAsOptBool: JsonParser<boolean | undefined>;
/**
 * Converts value received from some JSON to RGB in full format.
 * @param value - raw value.
 * @throws {TypeError} Value has incorrect type.
 */
export declare const parseJsonParamAsRGB: JsonParser<RGB>;
/**
 * Converts value received from some JSON to RGB in full format or undefined.
 * @param value - raw value.
 * @throws {TypeError} Value has incorrect type.
 */
export declare const parseJsonParamAsOptRGB: JsonParser<RGB | undefined>;
