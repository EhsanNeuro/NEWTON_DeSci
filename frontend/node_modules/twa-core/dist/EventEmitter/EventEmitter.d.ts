import { EmptyEventNames, EventListener, EventNames, EventParams, GlobalListener, NonEmptyEventNames } from './types';
/**
 * EventEmitter represents classic JavaScript event emitter. It allows usage
 * both known and unknown events.
 */
export declare class EventEmitter<Schema> {
    /**
     * List of currently bound events listeners.
     * @private
     */
    private listeners;
    /**
     * List of currently bound global event listeners.
     * @private
     */
    private globalListeners;
    /**
     * Emits known event which has no parameters.
     * @param event - event name.
     */
    emit<E extends EmptyEventNames<Schema>>(event: E): void;
    /**
     * Emits known event which has parameters.
     *
     * @param event - event name.
     * @param args - list of event listener arguments.
     */
    emit<E extends NonEmptyEventNames<Schema>>(event: E, ...args: EventParams<Schema[E]>): void;
    /**
     * Emits unknown event. This function is recognized dangerous and should be
     * used carefully as long as this function ignores event typings.
     *
     * @param event - event name.
     * @param args - list of event listener arguments.
     */
    emitUnsafe(event: string, ...args: any[]): void;
    /**
     * Adds new known event to be listened.
     *
     * @param event - event name.
     * @param listener - event listener.
     */
    on<E extends EventNames<Schema>>(event: E, listener: EventListener<Schema[E]>): void;
    /**
     * Removes listener of known event.
     *
     * @param event - event name.
     * @param listener - event listener.
     */
    off<E extends EventNames<Schema>>(event: E, listener: EventListener<Schema[E]>): void;
    /**
     * Subscribes to any events appearing.
     * @param listener - events listener.
     */
    subscribe(listener: GlobalListener): void;
    /**
     * Removes listener from global listeners.
     * @param listener - events listener.
     */
    unsubscribe(listener: GlobalListener): void;
}
