import { BridgeEventsMap } from './events';
import { GlobalEventEmitter } from './event-receiver';
import { postEvent } from './posting';
export interface BridgeProps {
    /**
     * Is debug mode currently enabled. Enable of this feature outputs additional
     * log messages into console.
     * @default false
     */
    debug?: boolean;
    /**
     * Origin used while posting message. This option is only used in case,
     * current environment is browser (Web version of Telegram) and could
     * be used for test purposes.
     * @default 'https://web.telegram.org'
     */
    targetOrigin?: string;
    /**
     * Event emitter to listen events from. It is allowed to leave this
     * property undefined unless some special events handling is required.
     */
    emitter?: GlobalEventEmitter;
}
/**
 * Provides special layer between parent device and current application.
 * It can send and receive events, return initial application parameters and
 * much more.
 * @see How events work: https://corefork.telegram.org/api/web-events
 */
export declare class Bridge {
    private _boundEmitter;
    private readonly targetOrigin;
    private readonly ee;
    constructor(props?: BridgeProps);
    private get boundEmitter();
    private set boundEmitter(value);
    private emit;
    private emitUnsafe;
    private log;
    /**
     * Prepares event data before passing it to listeners. Then, calls them.
     * @param type - event name.
     * @param data - event data.
     * @throws {TypeError} Data has unexpected format for event.
     */
    private processEvent;
    /**
     * Binds to specified event emitter and listens to it "message" event.
     * @param emitter - event emitter.
     */
    bind(emitter: GlobalEventEmitter): void;
    /**
     * Is debug mode currently enabled. This value must be set by developer
     * himself. In case, it is enabled, additional logs will appear in console.
     */
    debug: boolean;
    /**
     * Adds new event listener.
     */
    on: <E extends keyof BridgeEventsMap>(event: E, listener: import("twa-core").EventListener<BridgeEventsMap[E]>) => void;
    /**
     * Removes event listener.
     */
    off: <E extends keyof BridgeEventsMap>(event: E, listener: import("twa-core").EventListener<BridgeEventsMap[E]>) => void;
    postEvent: typeof postEvent;
    /**
     * Add listener for all events. It is triggered always, when `emit`
     * function called.
     */
    subscribe: (listener: import("twa-core").GlobalListener) => void;
    /**
     * Removes listener added with `subscribe`.
     */
    unsubscribe: (listener: import("twa-core").GlobalListener) => void;
    /**
     * Unbinds from currently bound event emitter.
     */
    unbind(): void;
}
