/**
 * Object, created by Telegram desktop or mobile applications, which allows
 * usage of events. As it was noticed, in case, when call of some event is
 * required, native application inserts JavaScript code as following:
 *
 * ```javascript
 * window.TelegramWebviewProxy.postEvent(event, data);
 * ```
 */
export declare type IncludeDesktopOrMobileEnvProxy<T> = T & {
    TelegramWebviewProxy: {
        postEvent(event: string, data: string): void;
    };
};
/**
 * Object, created by Telegram Windows Phone application, which allows usage of
 * events. As it was noticed, in case, when call of some event is required,
 * native application inserts JavaScript code as following:
 *
 * ```javascript
 * window.external.notify(data);
 * ```
 */
export declare type IncludeWindowsPhoneEnvProxy<T> = T & {
    external: {
        notify(data: string): void;
    };
};
/**
 * Returns true, in case passed value contains property, which is responsible
 * for receiving events on desktop version of Telegram.
 * @param wnd - Window object.
 */
export declare function isDesktopOrMobileEnv<W extends Window>(wnd: W): wnd is IncludeDesktopOrMobileEnvProxy<W>;
/**
 * Returns true, in case passed value contains property, which is responsible
 * for receiving events on desktop version of Telegram.
 * @param wnd - Window object.
 */
export declare function isWindowsPhoneEnv<W extends Window>(wnd: W): wnd is IncludeWindowsPhoneEnvProxy<W>;
/**
 * Returns true in case, current environment is iframe.
 * @see https://stackoverflow.com/a/326076
 */
export declare function isBrowserEnv(): boolean;
