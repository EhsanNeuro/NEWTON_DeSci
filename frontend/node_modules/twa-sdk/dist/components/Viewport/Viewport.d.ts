import { ViewportEventsMap } from './events';
import { BridgeLike } from '../../types';
export interface RequestViewportResult {
    height: number;
    width: number;
    isStateStable: boolean;
    isExpanded: boolean;
}
/**
 * Contains information about current WebApp device viewport, its dimensions
 * and state.
 */
export declare class Viewport {
    private readonly bridge;
    /**
     * Requests fresh information about current viewport.
     * FIXME: Be careful using this function in desktop version of Telegram as
     *  long as method web_app_request_viewport does not work on `tdesktop`
     *  and `macos` platforms.
     * @see Issue: https://github.com/Telegram-Web-Apps/twa/issues/5
     * @param bridge - bridge instance.
     */
    static request(bridge: BridgeLike): Promise<RequestViewportResult>;
    /**
     * Returns initialized instance of Viewport which is synchronized with
     * its actual state in Web Apps.
     * @param bridge - bridge instance.
     * @param height - viewport height.
     * @param width - viewport width.
     * @param stableHeight - viewport stable height.
     * @param isExpanded - viewport expansion status.
     */
    static synced(bridge: BridgeLike, height: number, width: number, stableHeight: number, isExpanded: boolean): Viewport;
    private readonly ee;
    private _height;
    private _width;
    private _stableHeight;
    private _isExpanded;
    constructor(bridge: BridgeLike, height: number, width: number, stableHeight: number, isExpanded: boolean);
    private set height(value);
    /**
     * The current height of the visible area of the Web App.
     *
     * The application can display just the top part of the Web App, with its
     * lower part remaining outside the screen area. From this position, the
     * user can "pull" the Web App to its maximum height, while the bot can do
     * the same by calling `expand` method. As the position of the Web App
     * changes, the current height value of the visible area will be updated
     * in real time.
     *
     * Please note that the refresh rate of this value is not sufficient
     * to smoothly follow the lower border of the window. It should not be
     * used to pin interface elements to the bottom of the visible area. It's
     * more appropriate to use the value of the `stableHeight`
     * field for this purpose.
     *
     * @see init
     * @see expand
     * @see stableHeight
     */
    get height(): number;
    private set stableHeight(value);
    /**
     * The height of the visible area of the Web App in its last stable state.
     *
     * The application can display just the top part of the Web App, with its
     * lower part remaining outside the screen area. From this position,
     * the user can "pull" the Web App to its maximum height, while the bot can
     * do the same by calling `expand` method.
     *
     * Unlike the value of `height`, the value of `stableHeight`
     * does not change as the position of the Web App changes with user
     * gestures or during animations. The value of `stableHeight`
     * will be updated after all gestures and animations are completed and
     * the Web App reaches its final size.
     *
     * @see init
     * @see expand
     * @see height
     */
    get stableHeight(): number;
    private set isExpanded(value);
    /**
     * Returns true if the Web App is expanded to the maximum available height.
     * Otherwise, if the Web App occupies part of the screen and can be expanded
     * to the full height using `expand` method.
     * @see expand
     */
    get isExpanded(): boolean;
    private set width(value);
    /**
     * Current viewport width.
     */
    get width(): number;
    /**
     * A method that expands the Web App to the maximum available height. To
     * find out if the Web App is expanded to the maximum height, refer to the
     * value of the `isExpanded`.
     * @see isExpanded
     */
    expand(): void;
    /**
     * Returns true in case current viewport height is stable and is not going to
     * change in the next moment.
     */
    get isStable(): boolean;
    /**
     * Adds new event listener.
     */
    on: <E extends keyof ViewportEventsMap>(event: E, listener: import("twa-core").EventListener<ViewportEventsMap[E]>) => void;
    /**
     * Removes event listener.
     */
    off: <E extends keyof ViewportEventsMap>(event: E, listener: import("twa-core").EventListener<ViewportEventsMap[E]>) => void;
}
