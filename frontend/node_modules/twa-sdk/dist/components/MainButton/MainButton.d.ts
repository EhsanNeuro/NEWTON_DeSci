import { EventEmitter, RGB } from 'twa-core';
import { MainButtonEventsMap } from './events';
import { BridgeLike } from '../../types';
import { MainButtonProps } from './types';
declare type Emitter = EventEmitter<MainButtonEventsMap>;
/**
 * Controls the main button, which is displayed at the bottom
 * of the Web App in the Telegram interface.
 *
 * TODO: Desktop animation is rather bad in case, we call progress visibility
 *  right after click. It is not smooth.
 */
export declare class MainButton {
    private readonly bridge;
    private _color;
    private _textColor;
    private readonly ee;
    private _isActive;
    private _isVisible;
    private _isProgressVisible;
    private _text;
    constructor(bridge: BridgeLike, _color: RGB, _textColor: RGB, props?: MainButtonProps);
    /**
     * Flag which is responsible for automatic commit of changes to native
     * application in case, they were done.
     */
    autocommit: boolean;
    private set color(value);
    /**
     * Returns current main button background color.
     */
    get color(): RGB;
    private set isActive(value);
    /**
     * Returns true in case, main button is currently enabled.
     */
    get isActive(): boolean;
    private set isProgressVisible(value);
    /**
     * Returns true in case, main button loading progress is currently visible.
     */
    get isProgressVisible(): boolean;
    private set isVisible(value);
    /**
     * Returns true in case, main button is currently visible.
     */
    get isVisible(): boolean;
    private set text(value);
    /**
     * Returns current main button text.
     */
    get text(): string;
    private set textColor(value);
    /**
     * Returns current main button text color.
     */
    get textColor(): RGB;
    /**
     * Sends current local button state to native app.
     */
    commit(): void;
    /**
     * Disables button. Returns current button instance for chaining.
     */
    disable(): this;
    /**
     * Enables button. Returns current button instance for chaining.
     */
    enable(): this;
    /**
     * Hides button. Returns current button instance for chaining.
     */
    hide(): this;
    /**
     * Hides button progress. Returns current button instance for chaining.
     */
    hideProgress(): this;
    /**
     * Adds new event listener.
     * FIXME: Event 'main_button_pressed' is still being received on Android
     *  even if the main button is disabled.
     *  Issue: https://github.com/Telegram-Web-Apps/twa/issues/3
     * @param event - event name.
     * @param listener - event listener.
     */
    on: Emitter['on'];
    /**
     * Removes event listener.
     * @param event - event name.
     * @param listener - event listener.
     */
    off: Emitter['off'];
    /**
     * Shows the button. Note that opening the Web App from the attachment
     * menu hides the main button until the user interacts with the Web App
     * interface.
     *
     * Returns current button instance for chaining.
     */
    show(): this;
    /**
     * A method to show a loading indicator on the button.
     * It is recommended to display loading progress if the action tied to the
     * button may take a long time.
     *
     * Returns current button instance for chaining.
     */
    showProgress(): this;
    /**
     * Sets new main button text. Returns current button instance for chaining.
     * Minimal length for text is 1 symbol, and maximum is 64 symbols.
     * @param text - new text.
     */
    setText(text: string): this;
    /**
     * Sets new main button text color. Returns current button instance for
     * chaining.
     * @param color - new text color.
     */
    setTextColor(color: RGB): this;
    /**
     * Updates current button color. Returns current button instance for
     * chaining.
     * @param color - color to set.
     */
    setColor(color: RGB): this;
}
export {};
