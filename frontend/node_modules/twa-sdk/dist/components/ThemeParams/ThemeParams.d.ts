import { RGB } from 'twa-core';
import { ThemeParams as TwaThemeParams } from 'twa-theme-params';
import { ThemeParamsEventsMap } from './events';
import { BridgeLike } from '../../types';
/**
 * Contains information about currently used theme by application.
 * @see https://core.telegram.org/bots/webapps#themeparams
 */
export declare class ThemeParams {
    /**
     * Requests fresh information about current theme.
     * @param bridge - bridge instance.
     */
    static request(bridge: BridgeLike): Promise<TwaThemeParams>;
    /**
     * Returns instance of ThemeParams which is synchronized with external
     * environment
     * @param bridge - bridge instance.
     * @param params - theme parameters.
     */
    static synced(bridge: BridgeLike, params: TwaThemeParams): ThemeParams;
    private readonly ee;
    private _backgroundColor;
    private _buttonColor;
    private _buttonTextColor;
    private _hintColor;
    private _linkColor;
    private _secondaryBackgroundColor;
    private _textColor;
    constructor(params: TwaThemeParams);
    /**
     * Extracts required theme parameters passed from Telegram and stores them
     * in current instance.
     * @param params - Telegram theme parameters.
     * @param emit - should update event be emitted in case changes were done.
     * @private
     */
    private assignThemeParams;
    /**
     * Returns background color.
     */
    get backgroundColor(): RGB | null;
    /**
     * Returns button color.
     */
    get buttonColor(): RGB | null;
    /**
     * Returns button text color.
     */
    get buttonTextColor(): RGB | null;
    /**
     * Returns hint color.
     */
    get hintColor(): RGB | null;
    /**
     * Returns true in case, current color scheme is recognized as dark. This
     * value is calculated according to theme background color.
     */
    get isDark(): boolean;
    /**
     * Returns current link color.
     */
    get linkColor(): RGB | null;
    /**
     * Adds new event listener.
     */
    on: <E extends "change">(event: E, listener: import("twa-core").EventListener<ThemeParamsEventsMap[E]>) => void;
    /**
     * Removes event listener.
     */
    off: <E extends "change">(event: E, listener: import("twa-core").EventListener<ThemeParamsEventsMap[E]>) => void;
    /**
     * Returns secondary background color.
     * @since Web App version 6.1+
     */
    get secondaryBackgroundColor(): RGB | null;
    /**
     * Returns text color.
     */
    get textColor(): RGB | null;
}
