import { Version } from 'twa-core';
import { InvoiceStatus } from 'twa-bridge';
import { Platform } from './types';
import { SupportsFunc } from '../../utils';
import { BridgeLike } from '../../types';
/**
 * Provides common Web Apps functionality not covered by other system
 * components.
 */
export declare class WebApp {
    private readonly bridge;
    private readonly _platform;
    constructor(bridge: BridgeLike, version: Version, _platform: Platform);
    /**
     * Closes Web App.
     */
    close(): void;
    /**
     * Returns true if passed version is more than or equal to current
     * Web App version.
     * @param version - compared version.
     */
    isVersionAtLeast(version: Version): boolean;
    /**
     * Opens a link in an external browser. The Web App will not be closed.
     *
     * Note that this method can be called only in response to the user
     * interaction with the Web App interface (e.g. click inside the Web App
     * or on the main button).
     * @param url - URL to be opened.
     */
    openLink(url: string): void;
    /**
     * Opens a Telegram link inside Telegram app. The Web App will be closed.
     * It expects passing link in full format, with hostname "t.me".
     * @param url - URL to be opened.
     * @throws {Error} URL has not allowed hostname.
     */
    openTelegramLink(url: string): void;
    /**
     * Opens an invoice using its url. It expects passing link in full format,
     * with hostname "t.me".
     * @param url - invoice URL.
     */
    openInvoice(url: string): Promise<InvoiceStatus>;
    /**
     * Returns current Web App platform.
     */
    get platform(): Platform;
    /**
     * Informs the Telegram app that the Web App is ready to be displayed.
     *
     * It is recommended to call this method as early as possible, as soon as
     * all essential interface elements loaded. Once this method called,
     * the loading placeholder is hidden and the Web App shown.
     *
     * If the method not called, the placeholder will be hidden only when
     * the page fully loaded.
     */
    ready(): void;
    /**
     * Reads text from clipboard and returns string or null. null is returned
     * in cases:
     * - Value in clipboard is not text
     * - Access to clipboard is not allowed
     */
    readTextFromClipboard(): Promise<string | null>;
    /**
     * A method used to send data to the bot. When this method called, a
     * service message sent to the bot containing the data of the
     * length up to 4096 bytes, and the Web App closed. See the field
     * `web_app_data` in the class Message.
     *
     * This method is only available for Web Apps launched via a Keyboard button.
     * @param data - data to send to bot.
     * @throws {Error} data has incorrect size.
     */
    sendData(data: string): void;
    /**
     * Returns true in case, specified method is supported by current WebApp.
     */
    supports: SupportsFunc<'openInvoice' | 'readTextFromClipboard'>;
    /**
     * Current Web App version. This property is used by other components to check if
     * some functionality is available on current device.
     */
    version: Version;
}
